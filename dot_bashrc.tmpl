# Start chezmoi template - "dot_bashrc.tmpl"
{{- if eq .chezmoi.os "windows" -}}

# windows
# ripgrep profile
export RIPGREP_CONFIG_PATH="$USERPROFILE/.ripgreprc"
alias rg='rg --path-separator=//'

{{- else if eq .chezmoi.osRelease.id "debian" -}}

# debian

{{- include "dot_bashrc_debian" -}}
{{- end -}}

. "$HOME/.cargo/env"

# Prefer vi-style keybindings in Bash
set -o vi

export SUDO_EDITOR=$(which nvim || which vim || which vi)
export VISUAL=$(which nvim || which vim || which vi)
export EDITOR="$VISUAL"

echo  cat ~/bash_shell_hints
echo 'wt.exe -w last new-tab -p "Debian" \; split-pane -V -p "Debian"'
echo 'set-title "Amazing Title"'
# echo zoxide path cd'd to 
export _ZO_ECHO=1

export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/go/bin:$PATH
# see https://github.com/neovim/neovim/blob/master/INSTALL.md#install-from-package
export PATH="$PATH:/opt/nvim-linux-x86_64/bin"

# Reuse a single ssh-agent across shells (DIY)
AGENT_ENV="$HOME/.ssh/agent.env"
# Import saved agent env if present
if [ -f "$AGENT_ENV" ]; then
  . "$AGENT_ENV" >/dev/null 2>&1
fi
# If no usable agent, start a new one and persist its env
if ! ssh-add -l >/dev/null 2>&1; then
  rc=$?
  if [ $rc -eq 2 ] || [ -z "${SSH_AUTH_SOCK:-}" ] || [ ! -S "$SSH_AUTH_SOCK" ] || ! kill -0 "${SSH_AGENT_PID:-0}" 2>/dev/null; then
    eval "$(ssh-agent -s)" >/dev/null
    mkdir -p "$HOME/.ssh"
    {
      echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
      echo "export SSH_AGENT_PID=$SSH_AGENT_PID"
    } >"$AGENT_ENV"
    chmod 600 "$AGENT_ENV"
  fi
fi
# If agent has no identities, optionally add default key (no timeout by default)
if ! ssh-add -l >/dev/null 2>&1; then
  # exit code 1 usually means: agent present, no identities
  [ -t 0 ] && [ -f "$HOME/.ssh/id_ed25519" ] && ssh-add "$HOME/.ssh/id_ed25519"
fi

# Pico SDK paths - only export if directories exist
[ -d "$HOME/pico/pico-sdk" ] && export PICO_SDK_PATH=$HOME/pico/pico-sdk
[ -d "$HOME/pico/pico-examples" ] && export PICO_EXAMPLES_PATH=$HOME/pico/pico-examples
[ -d "$HOME/pico/pico-extras" ] && export PICO_EXTRAS_PATH=$HOME/pico/pico-extras
[ -d "$HOME/pico/pico-playground" ] && export PICO_PLAYGROUND_PATH=$HOME/pico/pico-playground


# https://github.com/ajeetdsouza/zoxide?tab=readme-ov-file#configuration
eval "$(zoxide init bash)"

# mcfly
export MCFLY_RESULTS=60
eval "$(mcfly init bash)"

# Add npm global bin to PATH if it exists
[ -d "$HOME/.npm-global/bin" ] && export PATH=$HOME/.npm-global/bin:$PATH


# Connect IQ SDK
export CONNECTIQ_SDK_HOME="$HOME/.Garmin/ConnectIQ/Sdks/connectiq-sdk-lin-8.1.1-2025-03-27-66dae750f"
export PATH="$CONNECTIQ_SDK_HOME/bin:$PATH"

# fnm (resolve path relative to current user)
if [ -n "$XDG_DATA_HOME" ] && [ -d "$XDG_DATA_HOME/fnm" ]; then
  FNM_PATH="$XDG_DATA_HOME/fnm"
elif [ -d "$HOME/.local/share/fnm" ]; then
  FNM_PATH="$HOME/.local/share/fnm"
elif [ -d "$HOME/.fnm" ]; then
  FNM_PATH="$HOME/.fnm"
else
  FNM_PATH="$HOME/.local/share/fnm"
fi
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  eval "$(fnm env)"
fi

# uv shell completions
eval "$(uv generate-shell-completion bash)"
eval "$(uvx --generate-shell-completion bash)"
# End chezmoi template - "dot_bashrc.tmpl"
